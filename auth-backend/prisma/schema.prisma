// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  conversations ConversationParticipant[]
  messages    Message[]
}

model Conversation {
  id            String                      @id @default(uuid())
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id             String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  @@unique([userId, conversationId]) // Ensures a user can't join the same conversation twice
}

model Message {
  id            String        @id @default(uuid())
  text          String
  sender        User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  createdAt     DateTime      @default(now())

  @@index([conversationId]) // Optimized querying by conversation
}

